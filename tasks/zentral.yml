---

- meta: flush_handlers

- name: Ensure Rabbitmq is available
  wait_for:
    host: localhost
    port: 5672
    delay: 10

- name: Install zentral package dependencies
  package: name={{ zentral_pkg_deps }} state=present
  register: pkg_result
  until: pkg_result is success

- name: add zentral group
  group:
    name: _zentral
    state: present

- name: add zentral user
  user:
    name: _zentral
    group: _zentral
    uid: "{{ zentral_uid }}"
    shell: /bin/false
    home: "{{ zentral_homedir }}"

- name: git clone zentral repository
  git:
    repo: https://github.com/zentralopensource/zentral.git
    dest: "{{ zentral_homedir }}/zentral"
    version: "{{ zentral_version }}"
## FIXME! manage updates?
    update: no

- include: profile.yml

# required on xenial (default package is 1.2.3), https://github.com/pyca/pyopenssl/issues/559
- name: force recent cryptography in python pip requirements
  replace:
    dest: "{{ zentral_homedir }}/zentral/requirements.txt"
    regexp: '^cryptography.*'
    replace: 'cryptography>=1.7.1'

# https://github.com/zentralopensource/zentral/commit/eff616e8bd69d096c4a921fe46a11ba9622f5cab
- name: force psycopg2-binary in python pip requirements
  replace:
    dest: "{{ zentral_homedir }}/zentral/requirements.txt"
    regexp: '^psycopg2$'
    replace: 'psycopg2-binary'
  when: zentral_version == 'v0.4.0'

- name: install python pip requirements
  pip:
    requirements: "{{ zentral_homedir }}/zentral/requirements.txt"
    executable: "{{ zentral_pip3 | default('pip3') }}"
  register: pkg_result
  until: pkg_result is success

- name: ensure directories exist
  file:
    dest: "{{ item }}"
    state: directory
    owner: _zentral
    group: _zentral
  with_items:
    - /prometheus_sd
    - "{{ zentral_logdir }}"

- include: secret.yml
- name: Set fact api secret
  set_fact:
    api_secret: "{{ rand.stdout }}"
  no_log: true
- include: secret.yml
- name: Set fact django secret
  set_fact:
    django_secret: "{{ rand.stdout }}"
  no_log: true
- include: secret.yml
- name: Set fact prometheus secret
  set_fact:
    prometheus_secret: "{{ rand.stdout }}"
  no_log: true

- name: configure zentral
  template:
    src: base.json.j2
    dest: "{{ zentral_homedir }}/zentral/conf/start/zentral/base.json"
    mode: '0644'
    backup: yes
    validate: 'python -mjson.tool %s'

- include: certificate-selfsigned.yml
  when: zentral_certificate_cert == ''

- name: create cert full chain
  shell: >
    cat {{ zentral_certificate_root_ca }} {{ zentral_certificate_cert }} > {{ zentral_certificate_cert_fullchain }}
  args:
    creates: "{{ zentral_homedir }}/zentral_full_chain.crt"
  when: zentral_certificate_root_ca != '' and zentral_certificate_cert != ''


- include: db.yml

## FIXME! have file inside /var/_zentral/zentral/conf/start/docker/tls/

## FIXME! https://github.com/zentralopensource/zentral/blob/master/docker-compose.saml2.yml to convert
##               base.json in zentral.conf / /var/_zentral/zentral/server/server/settings.py

- block:
    - name: install zentral systemd configuration
      template:
        src: "systemd-{{ item }}.service.j2"
        dest: "/lib/systemd/system/{{ item }}.service"
        mode: '0644'
        backup: yes
      with_items:
        - zentral-gunicorn
        - zentral-workers
      register: systemdconf
      ignore_errors: true
      notify:
        - reload systemd
    - block:
        - include: "immutable.yml target_dir=/lib/systemd/system state=pre"
        - name: install zentral systemd configuration
          template:
            src: "systemd-{{ item }}.service.j2"
            dest: "/lib/systemd/system/{{ item }}.service"
            mode: '0644'
            backup: yes
          with_items:
            - zentral-gunicorn
            - zentral-workers
          notify:
            - reload systemd
        - include: "immutable.yml target_dir=/lib/systemd/system state=post"
      when: systemdconf is failed
    - block:
        - name: enable and start zentral systemd services
          service:
            name: "{{ item }}"
            enabled: yes
            state: 'started'
          ignore_errors: true
          with_items:
            - zentral-gunicorn
            - zentral-workers
      when: zentral_service_enabled
    - block:
        - name: disable and stop zentral systemd services
          service:
            name: "{{ item }}"
            enabled: no
            state: 'stopped'
          ignore_errors: true
          with_items:
            - zentral-gunicorn
            - zentral-workers
      when: not zentral_service_enabled
  when: ansible_service_mgr == 'systemd'
